security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
#        users_in_memory:
#            memory:
#                users:
#                    admin:
#                        password: $2y$12$1qgUpaZc8/S9MrNZCqJTTuzqhAfaaZB2eQnvHd2SwRWdC943g/kzK
#                        # password: password
#                        roles: 'ROLE_ADMIN'

        custom_db_provider:
            entity:
                class: App:User
                property: username

    role_hierarchy:
        ROLE_ADMIN: [ROLE_ASSESSMENT,ROLE_COMPARISON]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy

            pattern: ^/
            http_basic: ~
            provider: custom_db_provider
#            provider: users_in_memory

            # https://symfony.com/doc/current/security/form_login_setup.html
            form_login:
                login_path: admin
                check_path: admin
                default_target_path: admin
                require_previous_session: false
            logout:
                path: /logout
                target: admin
                success_handler: logout_success_handler

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    encoders:
        Symfony\Component\Security\Core\User\User:
            algorithm: bcrypt
            cost: 12
        App\Entity\User:
            algorithm: bcrypt